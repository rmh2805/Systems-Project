System Call Specification CSCI 452 Final Documentation
By Raymond Healy, Koen Komeya, Ian Campbell

Base line syscalls
    SYS_exit
        SIGNATURE:
            void exit(int32_t status)
        DESC:
            Terminate the calling process
        RETURN VALUE:
            A standard exit status

    SYS_read
        SIGNATURE:
            int32_t read(int chan, void *buffer, uint32_t length)
        DESC:
            Read into a buffer from a stream. This was edited by us
            to faciliate re-using this syscall to read from a file in the FS.
        RETURN VALUE:
            Number of bytes read on success, negative value on failure.

    SYS_write
        SIGNATURE:
            int32_t write(int chan, void *buffer, uint32_t length)
        DESC:
            Write from a buffer to a stream. This was edited by us 
            to faciliate re-using this syscall to write to a file in the FS.
        RETURN VALUE:
            Number of bytes written on success, negative value on failure.

    SYS_getpid
        SIGNATURE:
            pid_t getpid( void )
        DESC:
            Retrieves the PID of this process
        RETURN VALUE:
            The pid of the current process.
            
    SYS_getppid
        SIGNATURE:
            pid_t getppid( void )
        DESC:
            Retrieves the PID of the parent of this process
        RETURN VALUE:
            A pid_t containing the PID information of the parent.

    SYS_gettime
        SIGNATURE:
            time_t gettime( void )
        DESC:
            Retrieve the current system time
        RETURN VALUE:
            Returns the value of _system_time

    SYS_getprio
        SIGNATURE: 
            prio_t getprio( void )
        DESC:
            Retrieves the priority for this process
        RETURN VALUE:
            Returns a prio_t containing the processes priority 

    SYS_setprio
        SIGNATURE:
            prio_t setprio( prio_t new )
        DESC:
            Set the priority of this process
        RETURN VALUE:
            Returns current priority on success or returns E_BAD_PARAM on failure.

    SYS_kill
        SIGNATURE:
            int32_t kill( pid_t victim )
        DESC:
            Terminates a process with EXTREME prejudice
        RETURN VALUE:
            Returns E_SUCCESS on succes or a negative error status on failure.

    SYS_sleep
        SIGNATURE:
            void sleep (uint32_t msec)
        DESC:
            Put the current process to sleep for some time
        RETURN VALUE:
            Void

    SYS_spawn
        SIGNATURE:
            pid_t spawn(int (*entry)(uint32_t, uint32_t), 
                        prio_t prio, uint32_t arg1, uint32_t arg2)
        DESC:
            Create a new process
        RETURN VALUE:
            Return the PID of the new child spawned or a negative error
            status on failure.

    SYS_wait
        SIGNATURE:
            pid_t wait( int32_t *status )
        DESC:
            Wait for a child process to terminate. 
        RETURN VALUE:
            Returns the new zombies process PID on success or a negative error
            status on failure.

Multi User syscalls 
    SYS_getuid
        SIGNATURE: 
            uid_t getuid( void )
        DESC:
            Retrieves the uid of this process
        RETURN VALUE:
            Returns the current process uid value in a uid_t            

    SYS_getgid
        SIGNATURE:
            gid_t getgid( void )
        DESC:
            Retrieves the gid of the current process
        RETURN VALUE:
            Returns the current process gid value in a gid_t

    SYS_setuid
        SIGNATURE:
            uint32_t setuid( uid_t uid )
        DESC:
            Attemps to modify the uid of the current process
        RETURN VALUE:
            E_SUCCESS on success and a negative error status on failure. 

    SYS_setgid
        SIGNATURE:
            uint32_t setuid( uid_t uid )
        DESC:
            Attempts to modify the uid of the current process
        RETURN VALUE:
            E_SUCCESS on success and a negative error status on failure. 

File System syscalls
    SYS_fopen
        SIGNATURE:
            int32_t fopen( char * path, bool_t appen )
        DESC:
            Attempts to open a file and store its FD in the PCBs block
        RETURN VALUE:
            Returns the file descriptor integer on success and a negative 
            error status on failure.

    SYS_fclose
        SIGNATURE:
            int32_t fclose( uint32_t chanNr )
        DESC:
            Attempts to close an opened file
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status 
            on failure.

    SYS_fcreate
        SIGNATURE:
            int32_t fcreate( char * path, char * name, bool_t isFile )
        DESC:
            Attempts to create a file/dir after the provided path
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status 
            on failure.

    SYS_fremove
        SIGNATURE:
            int32_t fremove( char * path, char * name)
        DESC:
            Attempts to remove the file/dir at the end of the path
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status 
            on failure.

    SYS_fmove
        SIGNATURE:
            int32_t fmove( char * sPath, char * sName, char * dPath, char * dName )
        DESC:
            Attempts to remove the file/dir at the end of sPath and move it 
            to a new location at dPath with the name dName.
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status
            on failure.

    SYS_getinode
        SIGNATURE:
            int32_t getinode( char * path, inode_t * inode )
        DESC:
            Attempts to retrieve the inode at the end of the given path.
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status
            on failure.

    SYS_dirname
        SIGNATURE:
            int32_t dirname( char * path, char * buf, uint32_t subDirNr )
        DESC:
            Attempts to retrieve a subdirectory name after the end of the 
            given path and put it in the given buffer.
        RETURN VALUE:
            Returns E_SUCCESS on success and a negative error status
            on failure.

