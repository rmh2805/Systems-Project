System Call Specification CSCI 452 Final Documentation
By Raymond Healy, Koen Komeya, Ian Campbell

Base line syscalls
    SYS_exit
        SIGNATURE:
            void exit(int32_t status)
        DESC:
            Terminates the calling process with the provided exit status
        PARAMETERS:
            status: The exit status to set

    SYS_read
        SIGNATURE:
            int32_t read(int chan, void *buffer, uint32_t length)
        DESC:
            Read into a buffer from a stream. This was edited by us
            to faciliate re-using this syscall to read from a file in the FS.
        PARAMETERS:
            chan: The channel to read from
            buffer: The buffer to read in to
            length: The maximum number of bytes to read/buffer length
        RETURN VALUE:
            Returns the number of bytes read on success
            E_NO_PERMISSION if lacking read permission for the stream
            E_EOF if the end of the stream has been reached
            E_BAD_CHANNEL if an undefined channel is specified

    SYS_write
        SIGNATURE:
            int32_t write(int chan, void *buffer, uint32_t length)
        DESC:
            Write from a buffer to a stream. This was edited by us 
            to faciliate re-using this syscall to write to a file in the FS.
        PARAMETERS:
            chan: The channel to write to
            void*: The buffer to write data from
            length: The maximum number of bytes to write/buffer size
        RETURN VALUE:
            Returns the number of bytes written on success
            E_NO_PERMISSION if lacking read permission for the stream
            E_BAD_CHANNEL if an undefined channel is specified
            E_NO_DATA on failure to allocate data blocks for write

    SYS_getpid
        SIGNATURE:
            pid_t getpid( void )
        DESC:
            Retrieves the PID of this process
        RETURN VALUE:
            The pid of the current process
            
    SYS_getppid
        SIGNATURE:
            pid_t getppid( void )
        DESC:
            Retrieves the PID of the parent of this process
        RETURN VALUE:
           The pid information of the parent process

    SYS_gettime
        SIGNATURE:
            time_t gettime( void )
        DESC:
            Retrieve the current system time
        RETURN VALUE:
            Returns the value of _system_time

    SYS_getprio
        SIGNATURE: 
            prio_t getprio( void )
        DESC:
            Retrieves the priority for this process
        RETURN VALUE:
            Returns the processes' priority

    SYS_setprio
        SIGNATURE:
            prio_t setprio( prio_t new )
        DESC:
            Set the priority of this process
        PARAMETERS:
            new: The desired new priority
        RETURN VALUE:
            Returns previous priority on success
            E_BAD_PARAM on failure

    SYS_kill
        SIGNATURE:
            int32_t kill( pid_t victim )
        DESC:
            Terminates the process with the specified pid. Each process can only
            be terminated by a process from the same user, a user with active 
            group sudo, or the root user.
        PARAMETERS:
            victim: The pid of the targeted process
        RETURN VALUE:
            E_SUCCESS on succes
            E_NOT_FOUND if the target pcb is not E_NOT_FOUND
            E_NO_PERMISSION if lacking permission

    SYS_sleep
        SIGNATURE:
            void sleep (uint32_t msec)
        PARAMETERS:
            msec: The number of milliseconds to sleep for
        DESC:
            Puts the calling process to sleep for some time

    SYS_spawn
        SIGNATURE:
            pid_t spawn(int (*entry)(uint32_t, uint32_t), 
                        prio_t prio, uint32_t arg1, uint32_t arg2)
        DESC:
            Creates a new process with the specified entry point, priority, and 
            args.
        PARAMETERS:
            entry: The entrypoint of the new process
            prio: The initial priority of the new process
            arg1: The first argument to pass to the new process
            arg2: The second argument to pass to the new process
        RETURN VALUE:
            Returns the PID of the new child spawned on success
            E_BAD_PARAM on processes with invalid args (e.g. null entry)
            E_NO_MEMORY on failure to spawn the process

    SYS_wait
        SIGNATURE:
            pid_t wait( int32_t *status )
        DESC:
            Wait for a child process to terminate
        PARAMETERS:
            status: A return pointer for the child's exit status
        RETURN VALUE:
            Returns the exited process' PID on success
            E_NO_PROCS if the caller has no living children

Multi User syscalls 
    SYS_getuid
        SIGNATURE: 
            uid_t getuid( void )
        DESC:
            Retrieves the uid of the calling process
        RETURN VALUE:
            Returns the calling process' uid

    SYS_getgid
        SIGNATURE:
            gid_t getgid( void )
        DESC:
            Retrieves the gid of the calling process
        RETURN VALUE:
            Returns the calling process' gid

    SYS_setuid
        SIGNATURE:
            int32_t setuid( uid_t uid )
        DESC:
            Modifies the UID of the calling process. Returns error on all 
            attempts to modify uid (caller.UID != newUID) unless performed by 
            root user. Will also set current GID to user group on successful 
            modification.
        PARAMETERS:
            uid: The new uid to set
        RETURN VALUE:
            E_SUCCESS on success
            E_NO_PERMISSION if lacking permission

    SYS_setgid
        SIGNATURE:
            int32_t setgid( gid_t gid )
        DESC:
            Modifies the active GID of the calling process. Checks for group 
            existence and membership against the file "/.groups", except for 
            user group (0) and open group (1), which are universal.
        PARAMETERS:
            gid: The new gid to set
        RETURN VALUE:
            E_SUCCESS on success
            E_NOT_FOUND if the groups file is not found
            E_NO_PERMISSION if the caller does not belong to the specified group
            E_EOF if the group is not defined in the file
            E_FAILURE on general failure

File System syscalls
    SYS_fopen
        SIGNATURE:
            int32_t fopen( char * path, bool_t append )
        DESC:
            Opens a file and assigns it a channel in the caller's PCB.
        PARAMETERS:
            path: The path of the file to open
            append: If true, initialize file offset to EOF, else initialize to 0
        RETURN VALUE:
            Returns the assigned chanel number on success
            E_FILE_LIMIT if no more files may be opened
            E_NO_CHILDREN on failure to seek the requested file
            E_BAD_PARAM if the specified path does not lead to a file
            E_NO_PERMISSION if the user lacks both read and write permissions

    SYS_fclose
        SIGNATURE:
            int32_t fclose( uint32_t chanNr )
        DESC:
            Closes a file and frees its associated channel in the caller's PCB
        PARAMETERS:
            chanNr: The channel number of the file to close
        RETURN VALUE:
            E_SUCCESS on successful closure of the file
            E_FILE_LIMIT if the specified channel lies outside of file range
            E_BAD_CHANNEL on an unopened/already closed file

    SYS_fcreate
        SIGNATURE:
            int32_t fcreate( char * path, char * name, bool_t isFile )
        DESC:
            Attempts to create a file/dir after the provided path with the 
            specified name
        PARAMETERS:
            path: The path of the directory to insert the entry into
            name: The name of the new entry in the target directory
            isFile: If true, create new directory. Else create new file
        RETURN VALUE:
            E_SUCCESS on successful file creation
            E_NO_CHILDREN on failure to seek the end of the specified path
            E_BAD_PARAM on non-dir path, failure to get entry, or name reuse
            E_NO_PERMISSION if lacking permission to write to the directory
            E_NO_DATA on failure to allocate a new inode for the file
            E_NOT_FOUND on failure to retrieve or set the new inode
            E_FAILURE on failure to insert the new file into the dir at path


    SYS_fremove
        SIGNATURE:
            int32_t fremove( char * path, char * name)
        DESC:
            Attempts to remove the file/dir with the specified name at the end 
            of the path
        PARAMETERS:
            path: The path of the directory to remove the file from
            name: The name of the file to remove
        RETURN VALUE:
            E_SUCCESS on success
            E_NOT_FOUND on failure to seek the target
            E_NO_PERMISSION if lacking meta permissions (owner, root, or sudo)
            E_FAILURE if otherwise unable to delete the entry

    SYS_fmove
        SIGNATURE:
            int32_t fmove( char * sPath, char * sName, char * dPath, char * dName )
        DESC:
            Removes file/dir sName at the end of sPath while inserting it at 
            dPath with the name dName.
        PARAMETERS:
            sPath: The path of the source directory
            sName: The current name of the file
            dPath: The path of the destination directory
            dName: The new name of the file
        RETURN VALUE:
            E_SUCCESS on success
            E_BAD_PARAM on failure to seek source or dest directory
            E_NO_CHILDREN of sPath or dPath do not lead to directories
            E_NO_PERMISSION if lacking meta permission on file or write on dirs
            E_FAILURE on other failures

    SYS_getinode
        SIGNATURE:
            int32_t getinode( char * path, inode_t * inode )
        DESC:
            Retrieves the inode at the end of the given path.
        PARAMETERS:
            path: The path of the node to get
            inode: A return pointer for the grabbed inode
        RETURN VALUE:
            E_SUCCESS on success
            E_BAD_PARAM on failure to seek the end of path
            E_FAILURE on failure to retrieve the inode

    SYS_dirname
        SIGNATURE:
            int32_t dirname( char * path, char * buf, uint32_t subDirNr )
        DESC:
            Attempts to retrieve a subdirectory name after the end of the 
            given path and put it in the given buffer.
        PARAMETERS:
            path: The path of the subdirectory to get names from
            buf: A return buffer to receive the requested file name
            subDirNr: The entry number to retrieve
        RETURN VALUE:
            E_SUCCESS on success
            E_BAD_PARAM on failure to seek the directory
            E_NO_CHILDREN if path does not lead to a directory
            E_NO_PERMISSION if lacking read permission in directory
            E_FILE_LIMIT if subDirNr is out of bounds
            E_FAILURE on failure to retreive directory entry
    
    SYS_fchown
        SIGNATURE:
            int32_t fchown(char * path, uid_t uid, gid_t gid)
        DESC:
            Changes the ownership of a file/directory
        PARAMETERS:
            path: The path of the entry to change
            uid: The file's new owner uid
            gid: The file's new owner gid
        RETURN VALUE:
            E_SUCCESS on success
            E_BAD_PARAM on failure to seek entry
            E_NO_PERMISSION if lacking meta permissions on file
            E_NO_DATA on failure to update the inode

